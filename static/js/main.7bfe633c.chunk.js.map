{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/Filter.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selected","onSelected","className","map","todo","classNames","id","completed","title","type","onClick","TodoFilter","query","setQuery","filterBy","setFilterBy","onSubmit","event","preventDefault","name","value","onChange","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Filter","LoadingContent","onClose","ErrorContent","errorMessage","TodoModal","React","memo","useState","selectedUser","setSelectedUser","loading","setLoading","setErrorMessage","useEffect","userId","user","catch","finally","href","email","App","setTodos","selectedTodos","setSelectedTodos","all","prepTodos","useMemo","copyTodos","length","filter","toLowerCase","includes","active","item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7bfe633c.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { FC } from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selected: Todo | null,\n  onSelected: (todo: Todo | null) => void,\n};\n\nexport const TodoList: FC<Props> = ({\n  todos,\n  selected,\n  onSelected,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          key={todo.id}\n          data-cy=\"todo\"\n          className={classNames({\n            'has-background-info-light': selected?.id === todo.id,\n          })}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          {todo.completed ? (\n            <td className=\"is-vcentered\">\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </td>\n          ) : (\n            <td className=\"is-vcentered\" />\n          )}\n\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={classNames({\n                'has-text-danger': !todo.completed,\n                'has-text-success': todo.completed,\n              })}\n            >\n              {todo.title}\n            </p>\n          </td>\n\n          <td className=\"has-text-right is-vcentered\">\n\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => onSelected(todo)}\n            >\n              <span className=\"icon\">\n                <i className={classNames('far', {\n                  'fa-eye': selected?.id !== todo.id,\n                  'fa-eye-slash': selected?.id === todo.id,\n                })}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import { FC } from 'react';\nimport { Filter } from '../../types/Filter';\n\ntype Props = {\n  query: string,\n  setQuery: (newQuery: string) => void,\n  filterBy: Filter,\n  setFilterBy: (filter: Filter) => void,\n};\n\nexport const TodoFilter: FC<Props> = ({\n  query,\n  setQuery,\n  filterBy,\n  setFilterBy,\n}) => (\n  <form\n    className=\"field has-addons\"\n    onSubmit={(event) => event.preventDefault()}\n  >\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          name=\"filterBy\"\n          data-cy=\"statusSelect\"\n          value={filterBy}\n          onChange={(event) => setFilterBy(\n            event.target.value as Filter,\n          )}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        name=\"input\"\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => setQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => setQuery('')}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum Filter {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import React, { useEffect, useState, FC } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ninterface LoadingProps {\n  onClose: () => void;\n}\n\nconst LoadingContent: FC<LoadingProps> = ({ onClose }) => (\n  <div className=\"modal is-active\" data-cy=\"modal\">\n    <div className=\"modal-background\" />\n    <Loader />\n    <button\n      type=\"button\"\n      className=\"delete\"\n      data-cy=\"modal-close\"\n      aria-label=\"Close Modal\"\n      onClick={onClose}\n    />\n  </div>\n);\n\ninterface ErrorProps {\n  onClose: () => void;\n  errorMessage: string;\n}\n\nconst ErrorContent: FC<ErrorProps> = ({ onClose, errorMessage }) => (\n  <div className=\"modal is-active\" data-cy=\"modal\">\n    <div className=\"modal-background\" />\n    <div className=\"modal-card\">\n      <div className=\"modal-card-head\">\n        <button\n          type=\"button\"\n          className=\"delete\"\n          data-cy=\"modal-close\"\n          aria-label=\"Close Modal\"\n          onClick={onClose}\n        />\n      </div>\n      <div className=\"modal-card-body\">\n        <p className=\"block\" data-cy=\"modal-title\">\n          {errorMessage}\n        </p>\n      </div>\n    </div>\n  </div>\n);\n\ninterface Props {\n  selected: Todo;\n  onClose: () => void;\n}\n\nexport const TodoModal: FC<Props> = React.memo(({ selected, onClose }) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    getUser(selected.userId)\n      .then((user) => {\n        setSelectedUser(user);\n        setErrorMessage('');\n      })\n      .catch(() => setErrorMessage('Cannot find a user'))\n      .finally(() => setLoading(false));\n  }, [selected]);\n\n  if (loading) {\n    return <LoadingContent onClose={onClose} />;\n  }\n\n  if (errorMessage) {\n    return <ErrorContent onClose={onClose} errorMessage={errorMessage} />;\n  }\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <div\n            className=\"modal-card-title has-text-weight-medium\"\n            data-cy=\"modal-header\"\n          >\n            {`Todo #${selected.id}`}\n          </div>\n          <button\n            type=\"button\"\n            className=\"delete\"\n            data-cy=\"modal-close\"\n            aria-label=\"Close Modal\"\n            onClick={onClose}\n          />\n        </header>\n        <div className=\"modal-card-body\">\n          <p className=\"block\" data-cy=\"modal-title\">\n            {selected.title}\n          </p>\n          <p className=\"block\" data-cy=\"modal-user\">\n            {selected.completed ? (\n              <strong className=\"has-text-success\">Done</strong>\n            ) : (\n              <strong className=\"has-text-danger\">Planned</strong>\n            )}\n            {' by '}\n            <a href={`mailto:${selectedUser?.email}`}>{selectedUser?.name}</a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n});\n","import {\n  useEffect,\n  useMemo,\n  useState,\n  FC,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { Filter } from './types/Filter';\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedTodos, setSelectedTodos] = useState<Todo | null>(null);\n  const [query, setQuery] = useState('');\n  const [filterBy, setFilterBy] = useState<Filter>(Filter.all);\n\n  useEffect(() => {\n    setLoading(true);\n\n    getTodos()\n      .then(setTodos)\n      .finally(() => setLoading(false));\n  }, []);\n\n  const prepTodos: Todo[] = useMemo(() => {\n    let copyTodos = [...todos];\n\n    if (query.length) {\n      copyTodos = copyTodos.filter(\n        todo => todo.title.toLowerCase().includes(query.toLowerCase()),\n      );\n    }\n\n    switch (filterBy) {\n      case Filter.active:\n        return copyTodos.filter(item => !item.completed);\n\n      case Filter.completed:\n        return copyTodos.filter(item => item.completed);\n\n      default:\n        return copyTodos;\n    }\n  }, [query, filterBy, todos]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                filterBy={filterBy}\n                setFilterBy={setFilterBy}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loading && (\n                <Loader />\n              )}\n\n              {(!loading && prepTodos.length > 0) && (\n                <TodoList\n                  todos={prepTodos}\n                  selected={selectedTodos}\n                  onSelected={setSelectedTodos}\n                />\n              )}\n\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodos && (\n        <TodoModal\n          selected={selectedTodos}\n          onClose={() => setSelectedTodos(null)}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}